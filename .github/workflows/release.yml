name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: parallel-mengene-linux-x86_64
            binary_name: parallel-mengene
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: parallel-mengene-windows-x86_64
            binary_name: parallel-mengene.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: parallel-mengene-macos-x86_64
            binary_name: parallel-mengene

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Test binary
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./target/${{ matrix.target }}/release/parallel-mengene.exe --help
        else
          ./target/${{ matrix.target }}/release/parallel-mengene --help
        fi

    - name: Create release archive
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mkdir -p release
          cp target/${{ matrix.target }}/release/parallel-mengene.exe release/
          cp README.md release/
          cp LICENSE release/ 2>/dev/null || echo "No LICENSE file found"
          cd release
          powershell Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact_name }}.zip
        else
          mkdir -p release
          cp target/${{ matrix.target }}/release/parallel-mengene release/
          cp README.md release/
          cp LICENSE release/ 2>/dev/null || echo "No LICENSE file found"
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C release .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.*
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: ./artifacts

    - name: Create release notes
      run: |
        echo "# Parallel-Mengene ${{ github.ref_name }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## What's New" >> release_notes.md
        echo "- High-performance parallel file compression" >> release_notes.md
        echo "- Support for LZ4, Gzip, and Zstd algorithms" >> release_notes.md
        echo "- Multi-platform support (Linux, Windows, macOS)" >> release_notes.md
        echo "- Memory-mapped file handling for large files" >> release_notes.md
        echo "- Streaming compression for files larger than available memory" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Linux (x86_64)" >> release_notes.md
        echo "- \`parallel-mengene-linux-x86_64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Windows (x86_64)" >> release_notes.md
        echo "- \`parallel-mengene-windows-x86_64.zip\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### macOS (x86_64)" >> release_notes.md
        echo "- \`parallel-mengene-macos-x86_64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Linux/macOS" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "tar -xzf parallel-mengene-linux-x86_64.tar.gz" >> release_notes.md
        echo "sudo mv parallel-mengene /usr/local/bin/" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Windows" >> release_notes.md
        echo "1. Extract the ZIP file" >> release_notes.md
        echo "2. Add the extracted directory to your PATH" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Usage" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Compress a file" >> release_notes.md
        echo "parallel-mengene compress input.txt output.pmz --algorithm zstd" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Decompress a file" >> release_notes.md
        echo "parallel-mengene decompress output.pmz input.txt --algorithm zstd" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Benchmark algorithms" >> release_notes.md
        echo "parallel-mengene benchmark input.txt --algorithms lz4 gzip zstd" >> release_notes.md
        echo "\`\`\`" >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Parallel-Mengene ${{ github.ref_name }}
        body_path: release_notes.md
        files: |
          artifacts/parallel-mengene-linux-x86_64/parallel-mengene-linux-x86_64.tar.gz
          artifacts/parallel-mengene-windows-x86_64/parallel-mengene-windows-x86_64.zip
          artifacts/parallel-mengene-macos-x86_64/parallel-mengene-macos-x86_64.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
