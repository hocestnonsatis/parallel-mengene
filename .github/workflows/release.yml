name: Release Build

on:
  push:
    tags:
      - 'v*'  # Sadece v ile başlayan taglar için çalışır (v1.0.0, v2.1.3, vb.)
  workflow_dispatch:  # Manuel olarak da çalıştırılabilir

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run tests
      run: cargo test --workspace --verbose
      
    - name: Run clippy
      run: cargo clippy --workspace -- -D warnings
      
    - name: Check formatting
      run: cargo fmt --all -- --check

  build-release:
    name: Build Release Binaries
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: parallel-mengene-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: parallel-mengene-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: parallel-mengene-macos-x86_64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --bin parallel-mengene-cli
      
    - name: Create release directory
      run: mkdir -p release
      
    - name: Copy binary to release directory
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/parallel-mengene-cli.exe release/
        else
          cp target/${{ matrix.target }}/release/parallel-mengene-cli release/
        fi
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release/

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release archive
      run: |
        mkdir -p release
        for dir in parallel-mengene-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                cp "$file" "../release/"
              fi
            done
            cd ..
          fi
        done
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: release/*
        body: |
          ## Release ${{ github.ref_name }}
          
          ### Binaries
          - **Linux x86_64**: `parallel-mengene-linux-x86_64`
          - **Windows x86_64**: `parallel-mengene-windows-x86_64.exe`
          - **macOS x86_64**: `parallel-mengene-macos-x86_64`
          
          ### Installation
          Download the appropriate binary for your platform and make it executable:
          ```bash
          chmod +x parallel-mengene-*
          ```
          
          ### Usage
          ```bash
          ./parallel-mengene-cli --help
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}