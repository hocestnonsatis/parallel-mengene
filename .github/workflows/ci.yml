name: Fast CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ================================
  # PHASE 1: PARALLEL QUALITY CHECKS
  # ================================
  
  security-audit:
    name: 🔒 Security Audit
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check Rust installation
      run: |
        rustc --version
        cargo --version
    
    - name: Install security tools (if not already installed)
      run: |
        command -v cargo-audit >/dev/null 2>&1 || cargo install cargo-audit
        command -v cargo-deny >/dev/null 2>&1 || cargo install cargo-deny
        command -v cargo-outdated >/dev/null 2>&1 || cargo install cargo-outdated
    
    - name: Run security audit
      run: cargo audit
    
    - name: Run license check
      run: cargo deny check
    
    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1

  code-quality:
    name: 🧹 Code Quality
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # ================================
  # PHASE 2: PARALLEL TESTING
  # ================================
  
  test-suite:
    name: 🧪 Test Suite
    runs-on: self-hosted
    needs: [security-audit, code-quality]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Check Rust installation
      run: |
        rustc --version
        cargo --version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Run unit tests
      run: cargo test --verbose --all
    
    - name: Run integration tests
      run: cargo test --verbose --test integration_tests

  # ================================
  # PHASE 3: BUILD & FUNCTIONAL TESTS
  # ================================
  
  build-and-test:
    name: 🔨 Build & Test
    runs-on: self-hosted
    needs: [test-suite]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Check Rust installation
      run: |
        rustc --version
        cargo --version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Build release
      run: cargo build --release
    
    - name: Test binary
      run: ./target/release/parallel-mengene --help
    
    - name: Test compression/decompression
      run: |
        echo "Testing compression and decompression..."
        echo "Test data" > test.txt
        
        ./target/release/parallel-mengene compress test.txt test.pmz --algorithm zstd
        ./target/release/parallel-mengene decompress test.pmz test_decompressed.txt --algorithm zstd
        
        # Verify data integrity
        if cmp -s test.txt test_decompressed.txt; then
          echo "✅ Data integrity verified"
        else
          echo "❌ Data integrity failed"
          exit 1
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: parallel-mengene-linux-x86_64
        path: |
          target/release/parallel-mengene*
        retention-days: 7

  # ================================
  # PHASE 4: RELEASE (ONLY FOR TAGS)
  # ================================
  
  create-release:
    name: 🚀 Create Release
    needs: [build-and-test]
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*/parallel-mengene*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ================================
  # WORKFLOW SUMMARY
  # ================================
  
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: self-hosted
    needs: [security-audit, code-quality, test-suite, build-and-test, create-release]
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Generate workflow summary
      run: |
        echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | ${{ needs.test-suite.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Create Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
