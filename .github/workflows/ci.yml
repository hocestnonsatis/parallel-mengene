name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
          - rust: beta
            target: x86_64-unknown-linux-gnu
          - rust: nightly
            target: x86_64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all

    - name: Run integration tests
      run: cargo test --verbose --test integration_tests

    - name: Run benchmarks
      run: cargo bench --verbose

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: parallel-mengene-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: parallel-mengene-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: parallel-mengene-macos

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Test binary
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./target/${{ matrix.target }}/release/parallel-mengene.exe --help
        else
          ./target/${{ matrix.target }}/release/parallel-mengene --help
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          target/${{ matrix.target }}/release/parallel-mengene*
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run license check
      run: cargo deny check

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-performance-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Build release
      run: cargo build --release

    - name: Create test data
      run: |
        dd if=/dev/urandom of=test_100mb.bin bs=1M count=100
        dd if=/dev/urandom of=test_1gb.bin bs=1M count=1000

    - name: Run performance benchmarks
      run: |
        echo "Running compression benchmarks..."
        time ./target/release/parallel-mengene compress test_100mb.bin test_100mb_zstd.pmz --algorithm zstd --level 3
        time ./target/release/parallel-mengene compress test_1gb.bin test_1gb_zstd.pmz --algorithm zstd --level 3
        
        echo "Running decompression benchmarks..."
        time ./target/release/parallel-mengene decompress test_100mb_zstd.pmz test_100mb_decompressed.bin --algorithm zstd
        time ./target/release/parallel-mengene decompress test_1gb_zstd.pmz test_1gb_decompressed.bin --algorithm zstd
        
        echo "Verifying data integrity..."
        md5sum test_100mb.bin test_100mb_decompressed.bin
        md5sum test_1gb.bin test_1gb_decompressed.bin

    - name: Cleanup test files
      if: always()
      run: rm -f test_*.bin test_*.pmz
