name: Fast CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ================================
  # PHASE 1: PARALLEL QUALITY CHECKS
  # ================================
  
  security-audit:
    name: 🔒 Security Audit
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check Rust installation
      run: |
        rustc --version
        cargo --version
    
    - name: Install security tools (if not already installed)
      run: |
        command -v cargo-audit >/dev/null 2>&1 || cargo install cargo-audit
        command -v cargo-deny >/dev/null 2>&1 || cargo install cargo-deny
        command -v cargo-outdated >/dev/null 2>&1 || cargo install cargo-outdated
    
    - name: Run security audit
      run: cargo audit
    
    - name: Run license check
      run: cargo deny check
    
    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1

  code-quality:
    name: 🧹 Code Quality
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Check Rust installation
      run: |
        rustc --version
        cargo --version
        rustfmt --version
        cargo clippy --version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check system dependencies
      run: |
        echo "System dependencies check skipped - using pre-installed tools"
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # ================================
  # PHASE 2: PARALLEL TESTING
  # ================================
  
  test-suite:
    name: 🧪 Test Suite
    runs-on: self-hosted
    needs: [security-audit, code-quality]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Check Rust installation
      run: |
        rustc --version
        cargo --version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check system dependencies
      run: |
        echo "System dependencies check skipped - using pre-installed tools"
    
    - name: Run unit tests
      run: cargo test --verbose --all
    
    - name: Run integration tests
      run: cargo test --verbose --test integration_tests

  # ================================
  # PHASE 3: DOCKER BUILDS
  # ================================
  
  build-linux:
    name: 🐧 Build Linux
    runs-on: self-hosted
    needs: [test-suite]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Build Linux binary
      run: |
        sudo docker run --rm -v "$PWD":/workspace -w /workspace \
          rust:latest \
          bash -c "
            apt-get update && apt-get install -y build-essential pkg-config libssl-dev &&
            cargo build --release --target x86_64-unknown-linux-gnu --target-dir target/linux
          "
    
    - name: Test Linux binary
      run: |
        sudo docker run --rm -v "$PWD":/workspace -w /workspace \
          rust:latest \
          bash -c "
            ./target/linux/x86_64-unknown-linux-gnu/release/parallel-mengene --help
          "
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: parallel-mengene-linux
        path: target/linux/x86_64-unknown-linux-gnu/release/parallel-mengene*
        retention-days: 7

  build-windows:
    name: 🪟 Build Windows
    runs-on: self-hosted
    needs: [test-suite]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Build Windows binary
      run: |
        sudo docker run --rm -v "$PWD":/workspace -w /workspace \
          rust:latest \
          bash -c "
            apt-get update && apt-get install -y build-essential pkg-config libssl-dev &&
            rustup target add x86_64-pc-windows-gnu &&
            apt-get install -y gcc-mingw-w64-x86-64 &&
            cargo build --release --target x86_64-pc-windows-gnu --target-dir target/windows
          "
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: parallel-mengene-windows
        path: target/windows/x86_64-pc-windows-gnu/release/parallel-mengene*.exe
        retention-days: 7

  # ================================
  # PHASE 4: RELEASE (ONLY FOR TAGS)
  # ================================
  
  create-release:
    name: 🚀 Create Release
    needs: [build-linux, build-windows]
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*/parallel-mengene*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  # ================================
  # WORKFLOW SUMMARY
  # ================================
  
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: self-hosted
    needs: [security-audit, code-quality, test-suite, build-linux, build-windows, create-release]
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Generate workflow summary
      run: |
        echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | ${{ needs.test-suite.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Linux | ${{ needs.build-linux.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Windows | ${{ needs.build-windows.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Create Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
