name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  # ================================
  # PHASE 1: QUALITY CHECKS
  # ================================
  
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install security tools
      run: |
        cargo install cargo-audit
        cargo install cargo-outdated
    
    - name: Run security audit
      run: cargo audit
    
    - name: Run license check
      run: cargo deny check licenses
    
    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1

  code-quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy -- -D warnings

  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run unit tests
      run: cargo test --verbose
    
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

  # ================================
  # PHASE 2: BUILD & RELEASE
  # ================================
  
  build-linux:
    name: 🐧 Build Linux
    runs-on: ubuntu-latest
    needs: [test-suite]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build Linux binary
      run: cargo build --release
    
    - name: Test Linux binary
      run: ./target/release/parallel-mengene --help
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: parallel-mengene-linux
        path: target/release/parallel-mengene*
        retention-days: 7

  build-windows:
    name: 🪟 Build Windows
    runs-on: windows-latest
    needs: [test-suite]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build Windows binary
      run: cargo build --release
    
    - name: Test Windows binary
      run: .\target\release\parallel-mengene.exe --help
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: parallel-mengene-windows
        path: target/release/parallel-mengene*.exe
        retention-days: 7

  create-release:
    name: 🚀 Create Release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: parallel-mengene-linux
        path: ./artifacts/linux/
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: parallel-mengene-windows
        path: ./artifacts/windows/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          ./artifacts/linux/parallel-mengene*
          ./artifacts/windows/parallel-mengene*.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, test-suite, build-linux, build-windows, create-release]
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Generate workflow summary
      run: |
        echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | ${{ needs.test-suite.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Linux | ${{ needs.build-linux.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Windows | ${{ needs.build-windows.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Create Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
